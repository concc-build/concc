#!/bin/sh

export CONCC_DIR=/home/concc

PROGNAME=$(basename $0)
BASEDIR=$(cd $(dirname $0); pwd)

WORKDIR=$(pwd)
PROJECT=$CONCC_PROJECT
WORKERS=$CONCC_WORKER_LIST
VERBOSE=0

RTT_DELAY=$CONCC_RTT_DELAY

help() {
  cat <<EOF >&2
Execute a script with concc distributed build system

USAGE:
  $PROGNAME [-C <dir>] [-l] [-p <project>] [-w <workers>] [-v <verbose>] <script>
  $PROGNAME -h | --help

OPTIONS:
  -C <dir>
    Change to <dir> before doing anything else.

  -l, --local
    Execute jobs in the local container.

  -p, --project <project> [default: '$PROJECT']
    A space-separated pair of the hostname and the port number of the project
    container in the form <hostname>[:<port>].

  -w, --workers <workers> [default: '$WORKERS']
    A comma-separated list of worker containers to be connected.

  -v, --verbose <verbose> [default: $VERBOSE]
    Verbose level.

OPTIONS FOR TEST PURPOSES:
  --rtt-delay <delay> [default: no delay]
    Simuate a high RTT.

ARGUMENTS:
  <script>
    A script to be executed by the concc user in the client container.
EOF
  exit 0
}

log() {
  echo "$1" >&2
}

vlog() {
  if [ $VERBOSE -ge $1 ]
  then
    log "LOG($1): $2"
  fi
}

error() {
  log "ERROR: $1"
  exit 1
}

while [ $# -gt 0 ]
do
  case "$1" in
    '-h' | '--help')
      help
      ;;
    '-C')
      WORKDIR="$(cd $2; pwd)"
      shift 2
      ;;
    '-l' | '--local')
      export CONCC_EXEC_LOCAL=1
      shift
      ;;
    '-p' | '--project')
      PROJECT="$2"
      shift 2
      ;;
    '-w' | '--workers')
      WORKERS="$2"
      shift 2
      ;;
    '-v' | '--verbose')
      VERBOSE=$2
      shift 2
      ;;
    '--rtt-delay')
      RTT_DELAY=$2
      shift 2
      ;;
    *)
      break
      ;;
  esac
done

SCRIPT="$@"

PROJECT_HOST=$(echo "$PROJECT:" | cut -d ':' -f 1)
PROJECT_PORT=$(echo "$PROJECT:" | cut -d ':' -f 2)
PROJECT="$PROJECT_HOST:$PROJECT_PORT"

CONCC_UID=$(ls -ld /workspace | cut -d ' ' -f 3)
if getent passwd $CONCC_UID
then
   CONCC_UID=$(getent passwd $CONCC_UID | cut -d ':' -f 3)
fi

CONCC_GID=$(ls -ld /workspace | cut -d ' ' -f 4)
if getent group $CONCC_GID
then
  CONCC_GID=$(getent group $CONCC_GID | cut -d ':' -f 3)
fi

vlog 1 "Creating a user account for concc with $CONCC_UID:$CONCC_GID..."
groupadd -o -g $CONCC_GID concc
useradd -o -m -g $CONCC_GID -u $CONCC_UID concc

vlog 1 "Copying /home/concc/.ssh from /root/.ssh..."
cp -R /root/.ssh /home/concc/
chown -R concc:concc /home/concc/.ssh

if [ -x /opt/concc/scripts/setup-client ]
then
  vlog 1 "Run setup-client..."
  /opt/concc/scripts/setup-client $PROJECT
fi

vlog 1 "Initializing the worker pool..."
gosu concc concc-worker-pool reset

for WORKER in $WORKERS
do
  WORKER_HOST=$(echo "$WORKER:" | cut -d ':' -f 1)
  WORKER_PORT=$(echo "$WORKER:" | cut -d ':' -f 2)
  WORKER="$WORKER_HOST:$WORKER_PORT"

  if ssh -p $WORKER_PORT $WORKER_HOST test -f /tmp/ready
  then
    vlog 1 "$WORKER: Already started"
    continue
  fi

  if [ -x /opt/concc/scripts/setup-worker ]
  then
    vlog 1 "Running setup-worker..."
    /opt/concc/scripts/setup-worker $PROJECT $WORKER
  fi

  LIMIT=$(ssh -p $WORKER_PORT $WORKER_HOST cat /tmp/.concc-max-jobs)
  vlog 1 "$WORKER: Maximum number of jobs: $LIMIT"

  vlog 1 "Add $WORKER to the worker pool..."
  gosu concc concc-worker-pool add $WORKER $LIMIT
done

vlog 1 "Total maximum number of jobs: $(gosu concc concc-worker-pool limit)"

if [ -n "$ICECC_SCHEDULER" ]
then
  vlog 1 "Start iceccd in background"
  iceccd -d -m 0 -s $ICECC_SCHEDULER -n concc-poc
  sleep 10  # needs for waiting for connections between sched and daemons
fi

if [ -n "$RTT_DELAY" ]
then
  vlog 1 "Delay RTT by $RTT_DELAY"
  tc qdisc add dev eth0 root netem delay $RTT_DELAY
fi

vlog 1 "Run \`$SCRIPT\`"
(cd $WORKDIR; exec gosu concc sh -c "$SCRIPT")
